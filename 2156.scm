(define read-vec (make-vector 10001 0))
(define cal-vec (make-vector 10001 0))
(define count (read))
(define (iter f n)
  (if (<= n count)
      (begin (f n)
             (iter f (+ n 1)))))
(define (read-val n)
  (vector-set! read-vec n (read)))
(define (cal-max n)
  (cond ((= n 1) (vector-set! cal-vec 1 (vector-ref read-vec 1)))
        ((= n 2) (vector-set! cal-vec 2 (+ (vector-ref read-vec 1)
                                           (vector-ref read-vec 2))))
        ((= n 3) (vector-set! cal-vec 3
                              (max (+ (vector-ref read-vec 3)
                                      (vector-ref read-vec 2))
                                   (+ (vector-ref read-vec 3)
                                      (vector-ref read-vec 1))
                                   (+ (vector-ref read-vec 2)
                                      (vector-ref read-vec 1)))))
        (else (vector-set! cal-vec n (max (+ (vector-ref read-vec n)
                                             (vector-ref cal-vec (- n 2)))
                                          (+ (vector-ref read-vec n)
                                             (vector-ref read-vec (- n 1))
                                             (vector-ref cal-vec (- n 3)))
                                          (vector-ref cal-vec (- n 1)))))))
(iter read-val 1)
(iter cal-max 1)
(display (vector-ref cal-vec count))
(newline)
