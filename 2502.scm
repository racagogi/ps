(define avec (make-vector 31 0))
(define bvec (make-vector 31 0))
(vector-set! avec 1 1)
(vector-set! bvec 2 1)
(define (init count)
  (if (< count 31)
    (begin (vector-set! avec count (+ (vector-ref avec (- count 1))
                                      (vector-ref avec (- count 2))))
           (vector-set! bvec count (+ (vector-ref bvec (- count 1))
                                      (vector-ref bvec (- count 2))))
           (init (+ count 1)))))
(init 3)
(define d (read))
(define k (read))
(define a (vector-ref avec d))
(define b(vector-ref bvec d))

(define (ans a b acc)
  (if (= (modulo (- k (* a acc)) b) 0)
    (begin (print acc)
           (print (quotient (- k (* a acc)) b)))
    (ans a b (+ acc 1))))
(ans a b 1)
